// <auto-generated />
using System;
using DataLibrary;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLibrary.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250204014258_AddedAutoIncrementIdsForModels")]
    partial class AddedAutoIncrementIdsForModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("DataLibrary.Models.BodyWeightEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BodyWeightConditions", "lut");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "5"
                        },
                        new
                        {
                            Id = 2,
                            Name = "10"
                        },
                        new
                        {
                            Id = 3,
                            Name = "15"
                        },
                        new
                        {
                            Id = 4,
                            Name = "20"
                        },
                        new
                        {
                            Id = 5,
                            Name = "25"
                        },
                        new
                        {
                            Id = 6,
                            Name = "30"
                        },
                        new
                        {
                            Id = 7,
                            Name = "35"
                        },
                        new
                        {
                            Id = 8,
                            Name = "40"
                        },
                        new
                        {
                            Id = 9,
                            Name = "45"
                        },
                        new
                        {
                            Id = 10,
                            Name = "50"
                        },
                        new
                        {
                            Id = 11,
                            Name = "55"
                        },
                        new
                        {
                            Id = 12,
                            Name = "60"
                        },
                        new
                        {
                            Id = 13,
                            Name = "65"
                        },
                        new
                        {
                            Id = 14,
                            Name = "70"
                        },
                        new
                        {
                            Id = 15,
                            Name = "75"
                        },
                        new
                        {
                            Id = 16,
                            Name = "80"
                        },
                        new
                        {
                            Id = 17,
                            Name = "85"
                        },
                        new
                        {
                            Id = 18,
                            Name = "90"
                        });
                });

            modelBuilder.Entity("DataLibrary.Models.CalculationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("ADG")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("BodyWeightId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DietQualityEstimateId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("FatContent")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Gestation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GrazingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KidsLambsId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MilkYield")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BodyWeightId");

                    b.HasIndex("DietQualityEstimateId");

                    b.HasIndex("GrazingId");

                    b.HasIndex("Id");

                    b.HasIndex("KidsLambsId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Calculations", "dbo");
                });

            modelBuilder.Entity("DataLibrary.Models.CalculationHasFeedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CPDM")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("CalculationId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DM")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("FeedId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Intake")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MEMJKGDM")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CalculationId");

                    b.HasIndex("FeedId");

                    b.HasIndex("Id");

                    b.ToTable("CalculationHasFeeds", "dbo");
                });

            modelBuilder.Entity("DataLibrary.Models.CalculationHasResultEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CalculationHasFeedId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("GFresh")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PercentDryMatter")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PercentFresh")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalRation")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CalculationHasFeedId");

                    b.HasIndex("Id");

                    b.ToTable("CalculationHasResults", "dbo");
                });

            modelBuilder.Entity("DataLibrary.Models.CountryTranslationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TranslatedDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Id");

                    b.ToTable("CountryTranslations", (string)null);
                });

            modelBuilder.Entity("DataLibrary.Models.DietQualityEstimateEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DietQualityEstimateConditions", "lut");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Low (< 6.5 MJ/kg DM)"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Medium (~7.5 MJ/kg DM)"
                        },
                        new
                        {
                            Id = 3,
                            Name = "High (>8.5 MJ/kg DM)"
                        });
                });

            modelBuilder.Entity("DataLibrary.Models.Enums.CountryEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CountryConditions", "lut");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tunisia"
                        });
                });

            modelBuilder.Entity("DataLibrary.Models.Enums.LanguageEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LanguageConditions", "lut");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "English / Anglais"
                        },
                        new
                        {
                            Id = 2,
                            Name = "French / Français"
                        });
                });

            modelBuilder.Entity("DataLibrary.Models.Enums.SpeciesEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SpeciesConditions", "lut");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sheep"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Goat"
                        });
                });

            modelBuilder.Entity("DataLibrary.Models.FeedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CPPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DCPPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DryMatterPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MEMJKg")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MEMcalKg")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TDNPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Feeds", "dbo");
                });

            modelBuilder.Entity("DataLibrary.Models.FeedTranslationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FeedId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TranslatedDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FeedId");

                    b.HasIndex("Id");

                    b.ToTable("FeedTranslations", (string)null);
                });

            modelBuilder.Entity("DataLibrary.Models.GoatTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GoatTypeConditions", "lut");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Does"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kids"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bucks"
                        });
                });

            modelBuilder.Entity("DataLibrary.Models.GrazingEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GrazingConditions", "lut");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Grazing close-by"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Open range"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rough mountain terrain"
                        });
                });

            modelBuilder.Entity("DataLibrary.Models.KidsLambsEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NrSucklingKidsLambsConditions", "lut");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "0"
                        },
                        new
                        {
                            Id = 2,
                            Name = "1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "2"
                        },
                        new
                        {
                            Id = 4,
                            Name = "3"
                        },
                        new
                        {
                            Id = 5,
                            Name = "4"
                        });
                });

            modelBuilder.Entity("DataLibrary.Models.LabelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LabelKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Labels", (string)null);
                });

            modelBuilder.Entity("DataLibrary.Models.LabelTranslationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LabelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TranslatedText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TranslationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("LabelId");

                    b.ToTable("LabelTranslations", (string)null);
                });

            modelBuilder.Entity("DataLibrary.Models.LanguageTranslationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TranslatedDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("LanguageTranslations", (string)null);
                });

            modelBuilder.Entity("DataLibrary.Models.RefCountryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrencyValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("RefCountries", (string)null);
                });

            modelBuilder.Entity("DataLibrary.Models.RefLanguageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("RefLanguages", (string)null);
                });

            modelBuilder.Entity("DataLibrary.Models.RefSpeciesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("RefSpecies", (string)null);
                });

            modelBuilder.Entity("DataLibrary.Models.SheepTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SheepTypeConditions", "lut");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ewes"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Weaned lambs"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rams"
                        });
                });

            modelBuilder.Entity("DataLibrary.Models.SpeciesTranslationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TranslatedDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("SpeciesTranslations", (string)null);
                });

            modelBuilder.Entity("DataLibrary.Models.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceIdiom")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceManufacturer")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceName")
                        .HasColumnType("TEXT");

                    b.Property<string>("DevicePlatform")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceType")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceVersionString")
                        .HasColumnType("TEXT");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TermsAndConditions")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DataLibrary.Models.CalculationEntity", b =>
                {
                    b.HasOne("DataLibrary.Models.BodyWeightEntity", "BodyWeightEntity")
                        .WithMany()
                        .HasForeignKey("BodyWeightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLibrary.Models.DietQualityEstimateEntity", "DietQualityEstimateEntity")
                        .WithMany()
                        .HasForeignKey("DietQualityEstimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLibrary.Models.GrazingEntity", "GrazingEntity")
                        .WithMany()
                        .HasForeignKey("GrazingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLibrary.Models.KidsLambsEntity", "KidsLambsEntity")
                        .WithMany()
                        .HasForeignKey("KidsLambsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLibrary.Models.Enums.SpeciesEntity", "SpeciesEntity")
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyWeightEntity");

                    b.Navigation("DietQualityEstimateEntity");

                    b.Navigation("GrazingEntity");

                    b.Navigation("KidsLambsEntity");

                    b.Navigation("SpeciesEntity");
                });

            modelBuilder.Entity("DataLibrary.Models.CalculationHasFeedEntity", b =>
                {
                    b.HasOne("DataLibrary.Models.CalculationEntity", "Calculation")
                        .WithMany()
                        .HasForeignKey("CalculationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLibrary.Models.FeedEntity", "Feed")
                        .WithMany()
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calculation");

                    b.Navigation("Feed");
                });

            modelBuilder.Entity("DataLibrary.Models.CalculationHasResultEntity", b =>
                {
                    b.HasOne("DataLibrary.Models.CalculationHasFeedEntity", "CalculationHasFeed")
                        .WithMany()
                        .HasForeignKey("CalculationHasFeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalculationHasFeed");
                });

            modelBuilder.Entity("DataLibrary.Models.CountryTranslationEntity", b =>
                {
                    b.HasOne("DataLibrary.Models.Enums.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataLibrary.Models.FeedEntity", b =>
                {
                    b.HasOne("DataLibrary.Models.Enums.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLibrary.Models.Enums.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DataLibrary.Models.FeedTranslationEntity", b =>
                {
                    b.HasOne("DataLibrary.Models.FeedEntity", "Feed")
                        .WithMany()
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feed");
                });

            modelBuilder.Entity("DataLibrary.Models.LabelTranslationEntity", b =>
                {
                    b.HasOne("DataLibrary.Models.LabelEntity", "LabelEntity")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabelEntity");
                });

            modelBuilder.Entity("DataLibrary.Models.LanguageTranslationEntity", b =>
                {
                    b.HasOne("DataLibrary.Models.Enums.LanguageEntity", "LanguageEntity")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageEntity");
                });

            modelBuilder.Entity("DataLibrary.Models.SpeciesTranslationEntity", b =>
                {
                    b.HasOne("DataLibrary.Models.Enums.SpeciesEntity", "SpeciesEntity")
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpeciesEntity");
                });

            modelBuilder.Entity("DataLibrary.Models.UserEntity", b =>
                {
                    b.HasOne("DataLibrary.Models.Enums.CountryEntity", "CountryEntity")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLibrary.Models.Enums.LanguageEntity", "LanguageEntity")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLibrary.Models.Enums.SpeciesEntity", "SpeciesEntity")
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryEntity");

                    b.Navigation("LanguageEntity");

                    b.Navigation("SpeciesEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
